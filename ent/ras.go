// Code generated by entc, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/google/uuid"
	"whoam.xyz/ent/ras"
)

// RAS is the model entity for the RAS schema.
type RAS struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Subject holds the value of the "subject" field.
	Subject string `json:"subject,omitempty"`
	// PostURI holds the value of the "post_uri" field.
	PostURI *url.URL `json:"post_uri,omitempty"`
	// RedirectURI holds the value of the "redirect_uri" field.
	RedirectURI *url.URL `json:"redirect_uri,omitempty"`
	// State holds the value of the "state" field.
	State ras.State `json:"state,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RAS) scanValues() []interface{} {
	return []interface{}{
		&uuid.UUID{},      // id
		&sql.NullString{}, // subject
		&[]byte{},         // post_uri
		&[]byte{},         // redirect_uri
		&sql.NullString{}, // state
		&sql.NullTime{},   // created_at
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RAS fields.
func (r *RAS) assignValues(values ...interface{}) error {
	if m, n := len(values), len(ras.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	if value, ok := values[0].(*uuid.UUID); !ok {
		return fmt.Errorf("unexpected type %T for field id", values[0])
	} else if value != nil {
		r.ID = *value
	}
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field subject", values[0])
	} else if value.Valid {
		r.Subject = value.String
	}

	if value, ok := values[1].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field post_uri", values[1])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &r.PostURI); err != nil {
			return fmt.Errorf("unmarshal field post_uri: %v", err)
		}
	}

	if value, ok := values[2].(*[]byte); !ok {
		return fmt.Errorf("unexpected type %T for field redirect_uri", values[2])
	} else if value != nil && len(*value) > 0 {
		if err := json.Unmarshal(*value, &r.RedirectURI); err != nil {
			return fmt.Errorf("unmarshal field redirect_uri: %v", err)
		}
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field state", values[3])
	} else if value.Valid {
		r.State = ras.State(value.String)
	}
	if value, ok := values[4].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[4])
	} else if value.Valid {
		r.CreatedAt = value.Time
	}
	return nil
}

// Update returns a builder for updating this RAS.
// Note that, you need to call RAS.Unwrap() before calling this method, if this RAS
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *RAS) Update() *RASUpdateOne {
	return (&RASClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *RAS) Unwrap() *RAS {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: RAS is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *RAS) String() string {
	var builder strings.Builder
	builder.WriteString("RAS(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", subject=")
	builder.WriteString(r.Subject)
	builder.WriteString(", post_uri=")
	builder.WriteString(fmt.Sprintf("%v", r.PostURI))
	builder.WriteString(", redirect_uri=")
	builder.WriteString(fmt.Sprintf("%v", r.RedirectURI))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", r.State))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// RASs is a parsable slice of RAS.
type RASs []*RAS

func (r RASs) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
