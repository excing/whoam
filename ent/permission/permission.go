// Code generated by entc, DO NOT EDIT.

package permission

import (
	"time"
)

const (
	// Label holds the string label denoting the permission type in the database.
	Label = "permission"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// EdgeClient holds the string denoting the client edge name in mutations.
	EdgeClient = "client"
	// EdgeMethods holds the string denoting the methods edge name in mutations.
	EdgeMethods = "methods"

	// Table holds the table name of the permission in the database.
	Table = "permissions"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "permissions"
	// OwnerInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	OwnerInverseTable = "users"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "user_permissions"
	// ClientTable is the table the holds the client relation/edge.
	ClientTable = "permissions"
	// ClientInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	ClientInverseTable = "services"
	// ClientColumn is the table column denoting the client relation/edge.
	ClientColumn = "permission_client"
	// MethodsTable is the table the holds the methods relation/edge.
	MethodsTable = "methods"
	// MethodsInverseTable is the table name for the Method entity.
	// It exists in this package in order to avoid circular dependency with the "method" package.
	MethodsInverseTable = "methods"
	// MethodsColumn is the table column denoting the methods relation/edge.
	MethodsColumn = "permission_methods"
)

// Columns holds all SQL columns for permission fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Permission type.
var ForeignKeys = []string{
	"permission_client",
	"user_permissions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the created_at field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the updated_at field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	UpdateDefaultUpdatedAt func() time.Time
)
