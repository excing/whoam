// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"whoam.xyz/ent/oauth"
	"whoam.xyz/ent/service"
	"whoam.xyz/ent/user"
)

// OauthCreate is the builder for creating a Oauth entity.
type OauthCreate struct {
	config
	mutation *OauthMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (oc *OauthCreate) SetCreatedAt(t time.Time) *OauthCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (oc *OauthCreate) SetNillableCreatedAt(t *time.Time) *OauthCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetExpiredAt sets the expired_at field.
func (oc *OauthCreate) SetExpiredAt(t time.Time) *OauthCreate {
	oc.mutation.SetExpiredAt(t)
	return oc
}

// SetNillableExpiredAt sets the expired_at field if the given value is not nil.
func (oc *OauthCreate) SetNillableExpiredAt(t *time.Time) *OauthCreate {
	if t != nil {
		oc.SetExpiredAt(*t)
	}
	return oc
}

// SetRefreshToken sets the refresh_token field.
func (oc *OauthCreate) SetRefreshToken(s string) *OauthCreate {
	oc.mutation.SetRefreshToken(s)
	return oc
}

// SetOwnerID sets the owner edge to User by id.
func (oc *OauthCreate) SetOwnerID(id int) *OauthCreate {
	oc.mutation.SetOwnerID(id)
	return oc
}

// SetOwner sets the owner edge to User.
func (oc *OauthCreate) SetOwner(u *User) *OauthCreate {
	return oc.SetOwnerID(u.ID)
}

// SetServiceID sets the service edge to Service by id.
func (oc *OauthCreate) SetServiceID(id int) *OauthCreate {
	oc.mutation.SetServiceID(id)
	return oc
}

// SetService sets the service edge to Service.
func (oc *OauthCreate) SetService(s *Service) *OauthCreate {
	return oc.SetServiceID(s.ID)
}

// Mutation returns the OauthMutation object of the builder.
func (oc *OauthCreate) Mutation() *OauthMutation {
	return oc.mutation
}

// Save creates the Oauth in the database.
func (oc *OauthCreate) Save(ctx context.Context) (*Oauth, error) {
	var (
		err  error
		node *Oauth
	)
	oc.defaults()
	if len(oc.hooks) == 0 {
		if err = oc.check(); err != nil {
			return nil, err
		}
		node, err = oc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*OauthMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = oc.check(); err != nil {
				return nil, err
			}
			oc.mutation = mutation
			node, err = oc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(oc.hooks) - 1; i >= 0; i-- {
			mut = oc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, oc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OauthCreate) SaveX(ctx context.Context) *Oauth {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (oc *OauthCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := oauth.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.ExpiredAt(); !ok {
		v := oauth.DefaultExpiredAt()
		oc.mutation.SetExpiredAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OauthCreate) check() error {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	if _, ok := oc.mutation.ExpiredAt(); !ok {
		return &ValidationError{Name: "expired_at", err: errors.New("ent: missing required field \"expired_at\"")}
	}
	if _, ok := oc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New("ent: missing required field \"refresh_token\"")}
	}
	if v, ok := oc.mutation.RefreshToken(); ok {
		if err := oauth.RefreshTokenValidator(v); err != nil {
			return &ValidationError{Name: "refresh_token", err: fmt.Errorf("ent: validator failed for field \"refresh_token\": %w", err)}
		}
	}
	if _, ok := oc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New("ent: missing required edge \"owner\"")}
	}
	if _, ok := oc.mutation.ServiceID(); !ok {
		return &ValidationError{Name: "service", err: errors.New("ent: missing required edge \"service\"")}
	}
	return nil
}

func (oc *OauthCreate) sqlSave(ctx context.Context) (*Oauth, error) {
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (oc *OauthCreate) createSpec() (*Oauth, *sqlgraph.CreateSpec) {
	var (
		_node = &Oauth{config: oc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: oauth.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: oauth.FieldID,
			},
		}
	)
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.ExpiredAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: oauth.FieldExpiredAt,
		})
		_node.ExpiredAt = value
	}
	if value, ok := oc.mutation.RefreshToken(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: oauth.FieldRefreshToken,
		})
		_node.RefreshToken = value
	}
	if nodes := oc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauth.OwnerTable,
			Columns: []string{oauth.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.ServiceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   oauth.ServiceTable,
			Columns: []string{oauth.ServiceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OauthCreateBulk is the builder for creating a bulk of Oauth entities.
type OauthCreateBulk struct {
	config
	builders []*OauthCreate
}

// Save creates the Oauth entities in the database.
func (ocb *OauthCreateBulk) Save(ctx context.Context) ([]*Oauth, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Oauth, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OauthMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (ocb *OauthCreateBulk) SaveX(ctx context.Context) []*Oauth {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
