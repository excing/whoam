// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"net/url"
	"time"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/google/uuid"
	"whoam.xyz/ent/ras"
)

// RASCreate is the builder for creating a RAS entity.
type RASCreate struct {
	config
	mutation *RASMutation
	hooks    []Hook
}

// SetSubject sets the subject field.
func (rc *RASCreate) SetSubject(s string) *RASCreate {
	rc.mutation.SetSubject(s)
	return rc
}

// SetPostURI sets the post_uri field.
func (rc *RASCreate) SetPostURI(u *url.URL) *RASCreate {
	rc.mutation.SetPostURI(u)
	return rc
}

// SetRedirectURI sets the redirect_uri field.
func (rc *RASCreate) SetRedirectURI(u *url.URL) *RASCreate {
	rc.mutation.SetRedirectURI(u)
	return rc
}

// SetState sets the state field.
func (rc *RASCreate) SetState(r ras.State) *RASCreate {
	rc.mutation.SetState(r)
	return rc
}

// SetCreatedAt sets the created_at field.
func (rc *RASCreate) SetCreatedAt(t time.Time) *RASCreate {
	rc.mutation.SetCreatedAt(t)
	return rc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (rc *RASCreate) SetNillableCreatedAt(t *time.Time) *RASCreate {
	if t != nil {
		rc.SetCreatedAt(*t)
	}
	return rc
}

// SetID sets the id field.
func (rc *RASCreate) SetID(u uuid.UUID) *RASCreate {
	rc.mutation.SetID(u)
	return rc
}

// Mutation returns the RASMutation object of the builder.
func (rc *RASCreate) Mutation() *RASMutation {
	return rc.mutation
}

// Save creates the RAS in the database.
func (rc *RASCreate) Save(ctx context.Context) (*RAS, error) {
	var (
		err  error
		node *RAS
	)
	rc.defaults()
	if len(rc.hooks) == 0 {
		if err = rc.check(); err != nil {
			return nil, err
		}
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RASMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = rc.check(); err != nil {
				return nil, err
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RASCreate) SaveX(ctx context.Context) *RAS {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// defaults sets the default values of the builder before save.
func (rc *RASCreate) defaults() {
	if _, ok := rc.mutation.CreatedAt(); !ok {
		v := ras.DefaultCreatedAt()
		rc.mutation.SetCreatedAt(v)
	}
	if _, ok := rc.mutation.ID(); !ok {
		v := ras.DefaultID()
		rc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RASCreate) check() error {
	if _, ok := rc.mutation.Subject(); !ok {
		return &ValidationError{Name: "subject", err: errors.New("ent: missing required field \"subject\"")}
	}
	if _, ok := rc.mutation.PostURI(); !ok {
		return &ValidationError{Name: "post_uri", err: errors.New("ent: missing required field \"post_uri\"")}
	}
	if _, ok := rc.mutation.RedirectURI(); !ok {
		return &ValidationError{Name: "redirect_uri", err: errors.New("ent: missing required field \"redirect_uri\"")}
	}
	if _, ok := rc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New("ent: missing required field \"state\"")}
	}
	if v, ok := rc.mutation.State(); ok {
		if err := ras.StateValidator(v); err != nil {
			return &ValidationError{Name: "state", err: fmt.Errorf("ent: validator failed for field \"state\": %w", err)}
		}
	}
	if _, ok := rc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New("ent: missing required field \"created_at\"")}
	}
	return nil
}

func (rc *RASCreate) sqlSave(ctx context.Context) (*RAS, error) {
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}

func (rc *RASCreate) createSpec() (*RAS, *sqlgraph.CreateSpec) {
	var (
		_node = &RAS{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: ras.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: ras.FieldID,
			},
		}
	)
	if id, ok := rc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := rc.mutation.Subject(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: ras.FieldSubject,
		})
		_node.Subject = value
	}
	if value, ok := rc.mutation.PostURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ras.FieldPostURI,
		})
		_node.PostURI = value
	}
	if value, ok := rc.mutation.RedirectURI(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: ras.FieldRedirectURI,
		})
		_node.RedirectURI = value
	}
	if value, ok := rc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: ras.FieldState,
		})
		_node.State = value
	}
	if value, ok := rc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: ras.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// RASCreateBulk is the builder for creating a bulk of RAS entities.
type RASCreateBulk struct {
	config
	builders []*RASCreate
}

// Save creates the RAS entities in the database.
func (rcb *RASCreateBulk) Save(ctx context.Context) ([]*RAS, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*RAS, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RASMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX calls Save and panics if Save returns an error.
func (rcb *RASCreateBulk) SaveX(ctx context.Context) []*RAS {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
