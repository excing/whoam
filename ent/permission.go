// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"whoam.xyz/ent/permission"
	"whoam.xyz/ent/service"
	"whoam.xyz/ent/user"
)

// Permission is the model entity for the Permission schema.
type Permission struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PermissionQuery when eager-loading is set.
	Edges             PermissionEdges `json:"edges"`
	permission_client *string
	user_permissions  *int
}

// PermissionEdges holds the relations/edges for other nodes in the graph.
type PermissionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *User
	// Client holds the value of the client edge.
	Client *Service
	// Methods holds the value of the methods edge.
	Methods []*Method
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionEdges) OwnerOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// ClientOrErr returns the Client value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PermissionEdges) ClientOrErr() (*Service, error) {
	if e.loadedTypes[1] {
		if e.Client == nil {
			// The edge client was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: service.Label}
		}
		return e.Client, nil
	}
	return nil, &NotLoadedError{edge: "client"}
}

// MethodsOrErr returns the Methods value or an error if the edge
// was not loaded in eager-loading.
func (e PermissionEdges) MethodsOrErr() ([]*Method, error) {
	if e.loadedTypes[2] {
		return e.Methods, nil
	}
	return nil, &NotLoadedError{edge: "methods"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Permission) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // id
		&sql.NullTime{},  // created_at
		&sql.NullTime{},  // updated_at
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Permission) fkValues() []interface{} {
	return []interface{}{
		&sql.NullString{}, // permission_client
		&sql.NullInt64{},  // user_permissions
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Permission fields.
func (pe *Permission) assignValues(values ...interface{}) error {
	if m, n := len(values), len(permission.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pe.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		pe.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		pe.UpdatedAt = value.Time
	}
	values = values[2:]
	if len(values) == len(permission.ForeignKeys) {
		if value, ok := values[0].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field permission_client", values[0])
		} else if value.Valid {
			pe.permission_client = new(string)
			*pe.permission_client = value.String
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field user_permissions", value)
		} else if value.Valid {
			pe.user_permissions = new(int)
			*pe.user_permissions = int(value.Int64)
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Permission.
func (pe *Permission) QueryOwner() *UserQuery {
	return (&PermissionClient{config: pe.config}).QueryOwner(pe)
}

// QueryClient queries the client edge of the Permission.
func (pe *Permission) QueryClient() *ServiceQuery {
	return (&PermissionClient{config: pe.config}).QueryClient(pe)
}

// QueryMethods queries the methods edge of the Permission.
func (pe *Permission) QueryMethods() *MethodQuery {
	return (&PermissionClient{config: pe.config}).QueryMethods(pe)
}

// Update returns a builder for updating this Permission.
// Note that, you need to call Permission.Unwrap() before calling this method, if this Permission
// was returned from a transaction, and the transaction was committed or rolled back.
func (pe *Permission) Update() *PermissionUpdateOne {
	return (&PermissionClient{config: pe.config}).UpdateOne(pe)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pe *Permission) Unwrap() *Permission {
	tx, ok := pe.config.driver.(*txDriver)
	if !ok {
		panic("ent: Permission is not a transactional entity")
	}
	pe.config.driver = tx.drv
	return pe
}

// String implements the fmt.Stringer.
func (pe *Permission) String() string {
	var builder strings.Builder
	builder.WriteString("Permission(")
	builder.WriteString(fmt.Sprintf("id=%v", pe.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(pe.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(pe.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Permissions is a parsable slice of Permission.
type Permissions []*Permission

func (pe Permissions) config(cfg config) {
	for _i := range pe {
		pe[_i].config = cfg
	}
}
