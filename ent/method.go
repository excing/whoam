// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"whoam.xyz/ent/method"
	"whoam.xyz/ent/service"
)

// Method is the model entity for the Method schema.
type Method struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Route holds the value of the "route" field.
	Route string `json:"route,omitempty"`
	// Scope holds the value of the "scope" field.
	Scope method.Scope `json:"scope,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MethodQuery when eager-loading is set.
	Edges              MethodEdges `json:"edges"`
	permission_methods *int
	service_methods    *string
}

// MethodEdges holds the relations/edges for other nodes in the graph.
type MethodEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Service
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MethodEdges) OwnerOrErr() (*Service, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: service.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Method) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // route
		&sql.NullString{}, // scope
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Method) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // permission_methods
		&sql.NullString{}, // service_methods
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Method fields.
func (m *Method) assignValues(values ...interface{}) error {
	if m, n := len(values), len(method.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	m.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		m.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field route", values[1])
	} else if value.Valid {
		m.Route = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field scope", values[2])
	} else if value.Valid {
		m.Scope = method.Scope(value.String)
	}
	values = values[3:]
	if len(values) == len(method.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field permission_methods", value)
		} else if value.Valid {
			m.permission_methods = new(int)
			*m.permission_methods = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullString); !ok {
			return fmt.Errorf("unexpected type %T for field service_methods", values[1])
		} else if value.Valid {
			m.service_methods = new(string)
			*m.service_methods = value.String
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Method.
func (m *Method) QueryOwner() *ServiceQuery {
	return (&MethodClient{config: m.config}).QueryOwner(m)
}

// Update returns a builder for updating this Method.
// Note that, you need to call Method.Unwrap() before calling this method, if this Method
// was returned from a transaction, and the transaction was committed or rolled back.
func (m *Method) Update() *MethodUpdateOne {
	return (&MethodClient{config: m.config}).UpdateOne(m)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (m *Method) Unwrap() *Method {
	tx, ok := m.config.driver.(*txDriver)
	if !ok {
		panic("ent: Method is not a transactional entity")
	}
	m.config.driver = tx.drv
	return m
}

// String implements the fmt.Stringer.
func (m *Method) String() string {
	var builder strings.Builder
	builder.WriteString("Method(")
	builder.WriteString(fmt.Sprintf("id=%v", m.ID))
	builder.WriteString(", name=")
	builder.WriteString(m.Name)
	builder.WriteString(", route=")
	builder.WriteString(m.Route)
	builder.WriteString(", scope=")
	builder.WriteString(fmt.Sprintf("%v", m.Scope))
	builder.WriteByte(')')
	return builder.String()
}

// Methods is a parsable slice of Method.
type Methods []*Method

func (m Methods) config(cfg config) {
	for _i := range m {
		m[_i].config = cfg
	}
}
