// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"net/url"
	"sync"
	"time"

	"whoam.xyz/ent/predicate"
	"whoam.xyz/ent/ras"

	"github.com/facebook/ent"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRAS = "RAS"
)

// RASMutation represents an operation that mutate the RASs
// nodes in the graph.
type RASMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	subject       *string
	post_uri      **url.URL
	redirect_uri  **url.URL
	state         *ras.State
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*RAS, error)
	predicates    []predicate.RAS
}

var _ ent.Mutation = (*RASMutation)(nil)

// rasOption allows to manage the mutation configuration using functional options.
type rasOption func(*RASMutation)

// newRASMutation creates new mutation for $n.Name.
func newRASMutation(c config, op Op, opts ...rasOption) *RASMutation {
	m := &RASMutation{
		config:        c,
		op:            op,
		typ:           TypeRAS,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRASID sets the id field of the mutation.
func withRASID(id uuid.UUID) rasOption {
	return func(m *RASMutation) {
		var (
			err   error
			once  sync.Once
			value *RAS
		)
		m.oldValue = func(ctx context.Context) (*RAS, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().RAS.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRAS sets the old RAS of the mutation.
func withRAS(node *RAS) rasOption {
	return func(m *RASMutation) {
		m.oldValue = func(context.Context) (*RAS, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RASMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RASMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that, this
// operation is accepted only on RAS creation.
func (m *RASMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *RASMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetSubject sets the subject field.
func (m *RASMutation) SetSubject(s string) {
	m.subject = &s
}

// Subject returns the subject value in the mutation.
func (m *RASMutation) Subject() (r string, exists bool) {
	v := m.subject
	if v == nil {
		return
	}
	return *v, true
}

// OldSubject returns the old subject value of the RAS.
// If the RAS object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RASMutation) OldSubject(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldSubject is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldSubject requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSubject: %w", err)
	}
	return oldValue.Subject, nil
}

// ResetSubject reset all changes of the "subject" field.
func (m *RASMutation) ResetSubject() {
	m.subject = nil
}

// SetPostURI sets the post_uri field.
func (m *RASMutation) SetPostURI(u *url.URL) {
	m.post_uri = &u
}

// PostURI returns the post_uri value in the mutation.
func (m *RASMutation) PostURI() (r *url.URL, exists bool) {
	v := m.post_uri
	if v == nil {
		return
	}
	return *v, true
}

// OldPostURI returns the old post_uri value of the RAS.
// If the RAS object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RASMutation) OldPostURI(ctx context.Context) (v *url.URL, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldPostURI is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldPostURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPostURI: %w", err)
	}
	return oldValue.PostURI, nil
}

// ResetPostURI reset all changes of the "post_uri" field.
func (m *RASMutation) ResetPostURI() {
	m.post_uri = nil
}

// SetRedirectURI sets the redirect_uri field.
func (m *RASMutation) SetRedirectURI(u *url.URL) {
	m.redirect_uri = &u
}

// RedirectURI returns the redirect_uri value in the mutation.
func (m *RASMutation) RedirectURI() (r *url.URL, exists bool) {
	v := m.redirect_uri
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirectURI returns the old redirect_uri value of the RAS.
// If the RAS object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RASMutation) OldRedirectURI(ctx context.Context) (v *url.URL, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldRedirectURI is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldRedirectURI requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirectURI: %w", err)
	}
	return oldValue.RedirectURI, nil
}

// ResetRedirectURI reset all changes of the "redirect_uri" field.
func (m *RASMutation) ResetRedirectURI() {
	m.redirect_uri = nil
}

// SetState sets the state field.
func (m *RASMutation) SetState(r ras.State) {
	m.state = &r
}

// State returns the state value in the mutation.
func (m *RASMutation) State() (r ras.State, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old state value of the RAS.
// If the RAS object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RASMutation) OldState(ctx context.Context) (v ras.State, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldState is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldState: %w", err)
	}
	return oldValue.State, nil
}

// ResetState reset all changes of the "state" field.
func (m *RASMutation) ResetState() {
	m.state = nil
}

// SetCreatedAt sets the created_at field.
func (m *RASMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *RASMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old created_at value of the RAS.
// If the RAS object wasn't provided to the builder, the object is fetched
// from the database.
// An error is returned if the mutation operation is not UpdateOne, or database query fails.
func (m *RASMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is allowed only on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt reset all changes of the "created_at" field.
func (m *RASMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Op returns the operation name.
func (m *RASMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (RAS).
func (m *RASMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *RASMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.subject != nil {
		fields = append(fields, ras.FieldSubject)
	}
	if m.post_uri != nil {
		fields = append(fields, ras.FieldPostURI)
	}
	if m.redirect_uri != nil {
		fields = append(fields, ras.FieldRedirectURI)
	}
	if m.state != nil {
		fields = append(fields, ras.FieldState)
	}
	if m.created_at != nil {
		fields = append(fields, ras.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *RASMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ras.FieldSubject:
		return m.Subject()
	case ras.FieldPostURI:
		return m.PostURI()
	case ras.FieldRedirectURI:
		return m.RedirectURI()
	case ras.FieldState:
		return m.State()
	case ras.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database.
// An error is returned if the mutation operation is not UpdateOne,
// or the query to the database was failed.
func (m *RASMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ras.FieldSubject:
		return m.OldSubject(ctx)
	case ras.FieldPostURI:
		return m.OldPostURI(ctx)
	case ras.FieldRedirectURI:
		return m.OldRedirectURI(ctx)
	case ras.FieldState:
		return m.OldState(ctx)
	case ras.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown RAS field %s", name)
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RASMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ras.FieldSubject:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSubject(v)
		return nil
	case ras.FieldPostURI:
		v, ok := value.(*url.URL)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPostURI(v)
		return nil
	case ras.FieldRedirectURI:
		v, ok := value.(*url.URL)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirectURI(v)
		return nil
	case ras.FieldState:
		v, ok := value.(ras.State)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetState(v)
		return nil
	case ras.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown RAS field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *RASMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *RASMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *RASMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown RAS numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *RASMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *RASMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *RASMutation) ClearField(name string) error {
	return fmt.Errorf("unknown RAS nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *RASMutation) ResetField(name string) error {
	switch name {
	case ras.FieldSubject:
		m.ResetSubject()
		return nil
	case ras.FieldPostURI:
		m.ResetPostURI()
		return nil
	case ras.FieldRedirectURI:
		m.ResetRedirectURI()
		return nil
	case ras.FieldState:
		m.ResetState()
		return nil
	case ras.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown RAS field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *RASMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *RASMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *RASMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *RASMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *RASMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *RASMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *RASMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown RAS unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *RASMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown RAS edge %s", name)
}
