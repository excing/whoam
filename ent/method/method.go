// Code generated by entc, DO NOT EDIT.

package method

import (
	"fmt"
)

const (
	// Label holds the string label denoting the method type in the database.
	Label = "method"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldRoute holds the string denoting the route field in the database.
	FieldRoute = "route"
	// FieldScope holds the string denoting the scope field in the database.
	FieldScope = "scope"

	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"

	// Table holds the table name of the method in the database.
	Table = "methods"
	// OwnerTable is the table the holds the owner relation/edge.
	OwnerTable = "methods"
	// OwnerInverseTable is the table name for the Service entity.
	// It exists in this package in order to avoid circular dependency with the "service" package.
	OwnerInverseTable = "services"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "service_methods"
)

// Columns holds all SQL columns for method fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldRoute,
	FieldScope,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the Method type.
var ForeignKeys = []string{
	"permission_methods",
	"service_methods",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Scope defines the type for the scope enum field.
type Scope string

// ScopePublic is the default Scope.
const DefaultScope = ScopePublic

// Scope values.
const (
	ScopePublic  Scope = "public"
	ScopePrivate Scope = "private"
)

func (s Scope) String() string {
	return string(s)
}

// ScopeValidator is a validator for the "scope" field enum values. It is called by the builders before save.
func ScopeValidator(s Scope) error {
	switch s {
	case ScopePublic, ScopePrivate:
		return nil
	default:
		return fmt.Errorf("method: invalid enum value for scope field: %q", s)
	}
}
