// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"whoam.xyz/ent/method"
	"whoam.xyz/ent/predicate"
	"whoam.xyz/ent/service"
)

// MethodUpdate is the builder for updating Method entities.
type MethodUpdate struct {
	config
	hooks    []Hook
	mutation *MethodMutation
}

// Where adds a new predicate for the builder.
func (mu *MethodUpdate) Where(ps ...predicate.Method) *MethodUpdate {
	mu.mutation.predicates = append(mu.mutation.predicates, ps...)
	return mu
}

// SetName sets the name field.
func (mu *MethodUpdate) SetName(s string) *MethodUpdate {
	mu.mutation.SetName(s)
	return mu
}

// SetRoute sets the route field.
func (mu *MethodUpdate) SetRoute(s string) *MethodUpdate {
	mu.mutation.SetRoute(s)
	return mu
}

// SetScope sets the scope field.
func (mu *MethodUpdate) SetScope(m method.Scope) *MethodUpdate {
	mu.mutation.SetScope(m)
	return mu
}

// SetNillableScope sets the scope field if the given value is not nil.
func (mu *MethodUpdate) SetNillableScope(m *method.Scope) *MethodUpdate {
	if m != nil {
		mu.SetScope(*m)
	}
	return mu
}

// SetOwnerID sets the owner edge to Service by id.
func (mu *MethodUpdate) SetOwnerID(id string) *MethodUpdate {
	mu.mutation.SetOwnerID(id)
	return mu
}

// SetOwner sets the owner edge to Service.
func (mu *MethodUpdate) SetOwner(s *Service) *MethodUpdate {
	return mu.SetOwnerID(s.ID)
}

// Mutation returns the MethodMutation object of the builder.
func (mu *MethodUpdate) Mutation() *MethodMutation {
	return mu.mutation
}

// ClearOwner clears the "owner" edge to type Service.
func (mu *MethodUpdate) ClearOwner() *MethodUpdate {
	mu.mutation.ClearOwner()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MethodUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(mu.hooks) == 0 {
		if err = mu.check(); err != nil {
			return 0, err
		}
		affected, err = mu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = mu.check(); err != nil {
				return 0, err
			}
			mu.mutation = mutation
			affected, err = mu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(mu.hooks) - 1; i >= 0; i-- {
			mut = mu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MethodUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MethodUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MethodUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MethodUpdate) check() error {
	if v, ok := mu.mutation.Scope(); ok {
		if err := method.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf("ent: validator failed for field \"scope\": %w", err)}
		}
	}
	if _, ok := mu.mutation.OwnerID(); mu.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (mu *MethodUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   method.Table,
			Columns: method.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: method.FieldID,
			},
		},
	}
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: method.FieldName,
		})
	}
	if value, ok := mu.mutation.Route(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: method.FieldRoute,
		})
	}
	if value, ok := mu.mutation.Scope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: method.FieldScope,
		})
	}
	if mu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   method.OwnerTable,
			Columns: []string{method.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   method.OwnerTable,
			Columns: []string{method.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{method.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MethodUpdateOne is the builder for updating a single Method entity.
type MethodUpdateOne struct {
	config
	hooks    []Hook
	mutation *MethodMutation
}

// SetName sets the name field.
func (muo *MethodUpdateOne) SetName(s string) *MethodUpdateOne {
	muo.mutation.SetName(s)
	return muo
}

// SetRoute sets the route field.
func (muo *MethodUpdateOne) SetRoute(s string) *MethodUpdateOne {
	muo.mutation.SetRoute(s)
	return muo
}

// SetScope sets the scope field.
func (muo *MethodUpdateOne) SetScope(m method.Scope) *MethodUpdateOne {
	muo.mutation.SetScope(m)
	return muo
}

// SetNillableScope sets the scope field if the given value is not nil.
func (muo *MethodUpdateOne) SetNillableScope(m *method.Scope) *MethodUpdateOne {
	if m != nil {
		muo.SetScope(*m)
	}
	return muo
}

// SetOwnerID sets the owner edge to Service by id.
func (muo *MethodUpdateOne) SetOwnerID(id string) *MethodUpdateOne {
	muo.mutation.SetOwnerID(id)
	return muo
}

// SetOwner sets the owner edge to Service.
func (muo *MethodUpdateOne) SetOwner(s *Service) *MethodUpdateOne {
	return muo.SetOwnerID(s.ID)
}

// Mutation returns the MethodMutation object of the builder.
func (muo *MethodUpdateOne) Mutation() *MethodMutation {
	return muo.mutation
}

// ClearOwner clears the "owner" edge to type Service.
func (muo *MethodUpdateOne) ClearOwner() *MethodUpdateOne {
	muo.mutation.ClearOwner()
	return muo
}

// Save executes the query and returns the updated entity.
func (muo *MethodUpdateOne) Save(ctx context.Context) (*Method, error) {
	var (
		err  error
		node *Method
	)
	if len(muo.hooks) == 0 {
		if err = muo.check(); err != nil {
			return nil, err
		}
		node, err = muo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MethodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = muo.check(); err != nil {
				return nil, err
			}
			muo.mutation = mutation
			node, err = muo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(muo.hooks) - 1; i >= 0; i-- {
			mut = muo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, muo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MethodUpdateOne) SaveX(ctx context.Context) *Method {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MethodUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MethodUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MethodUpdateOne) check() error {
	if v, ok := muo.mutation.Scope(); ok {
		if err := method.ScopeValidator(v); err != nil {
			return &ValidationError{Name: "scope", err: fmt.Errorf("ent: validator failed for field \"scope\": %w", err)}
		}
	}
	if _, ok := muo.mutation.OwnerID(); muo.mutation.OwnerCleared() && !ok {
		return errors.New("ent: clearing a required unique edge \"owner\"")
	}
	return nil
}

func (muo *MethodUpdateOne) sqlSave(ctx context.Context) (_node *Method, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   method.Table,
			Columns: method.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: method.FieldID,
			},
		},
	}
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Method.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := muo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: method.FieldName,
		})
	}
	if value, ok := muo.mutation.Route(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: method.FieldRoute,
		})
	}
	if value, ok := muo.mutation.Scope(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: method.FieldScope,
		})
	}
	if muo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   method.OwnerTable,
			Columns: []string{method.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: service.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   method.OwnerTable,
			Columns: []string{method.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: service.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Method{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues()
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{method.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
