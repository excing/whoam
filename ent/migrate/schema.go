// Code generated by entc, DO NOT EDIT.

package migrate

import (
	"github.com/facebook/ent/dialect/sql/schema"
	"github.com/facebook/ent/schema/field"
)

var (
	// MethodsColumns holds the columns for the "methods" table.
	MethodsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "route", Type: field.TypeString},
		{Name: "scope", Type: field.TypeEnum, Enums: []string{"public", "private"}, Default: "public"},
		{Name: "permission_methods", Type: field.TypeInt, Nullable: true},
		{Name: "service_methods", Type: field.TypeInt, Nullable: true},
	}
	// MethodsTable holds the schema information for the "methods" table.
	MethodsTable = &schema.Table{
		Name:       "methods",
		Columns:    MethodsColumns,
		PrimaryKey: []*schema.Column{MethodsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "methods_permissions_methods",
				Columns: []*schema.Column{MethodsColumns[4]},

				RefColumns: []*schema.Column{PermissionsColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "methods_services_methods",
				Columns: []*schema.Column{MethodsColumns[5]},

				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// OauthsColumns holds the columns for the "oauths" table.
	OauthsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "expired_at", Type: field.TypeTime},
		{Name: "main_token", Type: field.TypeString, Unique: true},
		{Name: "oauth_service", Type: field.TypeInt, Nullable: true},
		{Name: "user_oauths", Type: field.TypeInt, Nullable: true},
	}
	// OauthsTable holds the schema information for the "oauths" table.
	OauthsTable = &schema.Table{
		Name:       "oauths",
		Columns:    OauthsColumns,
		PrimaryKey: []*schema.Column{OauthsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "oauths_services_service",
				Columns: []*schema.Column{OauthsColumns[4]},

				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "oauths_users_oauths",
				Columns: []*schema.Column{OauthsColumns[5]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// PermissionsColumns holds the columns for the "permissions" table.
	PermissionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "permission_client", Type: field.TypeInt, Nullable: true},
		{Name: "user_permissions", Type: field.TypeInt, Nullable: true},
	}
	// PermissionsTable holds the schema information for the "permissions" table.
	PermissionsTable = &schema.Table{
		Name:       "permissions",
		Columns:    PermissionsColumns,
		PrimaryKey: []*schema.Column{PermissionsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "permissions_services_client",
				Columns: []*schema.Column{PermissionsColumns[3]},

				RefColumns: []*schema.Column{ServicesColumns[0]},
				OnDelete:   schema.SetNull,
			},
			{
				Symbol:  "permissions_users_permissions",
				Columns: []*schema.Column{PermissionsColumns[4]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// RaSsColumns holds the columns for the "ra_ss" table.
	RaSsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeUUID},
		{Name: "subject", Type: field.TypeString},
		{Name: "post_uri", Type: field.TypeJSON},
		{Name: "redirect_uri", Type: field.TypeJSON},
		{Name: "state", Type: field.TypeEnum, Enums: []string{"new", "allowed", "rejected", "abstained", "voided"}},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "ras_organizer", Type: field.TypeInt, Nullable: true},
	}
	// RaSsTable holds the schema information for the "ra_ss" table.
	RaSsTable = &schema.Table{
		Name:       "ra_ss",
		Columns:    RaSsColumns,
		PrimaryKey: []*schema.Column{RaSsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:  "ra_ss_users_organizer",
				Columns: []*schema.Column{RaSsColumns[6]},

				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.SetNull,
			},
		},
	}
	// ServicesColumns holds the columns for the "services" table.
	ServicesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "service_id", Type: field.TypeString, Unique: true},
		{Name: "name", Type: field.TypeString},
		{Name: "subject", Type: field.TypeString},
		{Name: "domain", Type: field.TypeString},
		{Name: "clone_uri", Type: field.TypeString},
	}
	// ServicesTable holds the schema information for the "services" table.
	ServicesTable = &schema.Table{
		Name:        "services",
		Columns:     ServicesColumns,
		PrimaryKey:  []*schema.Column{ServicesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "email", Type: field.TypeString},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:        "users",
		Columns:     UsersColumns,
		PrimaryKey:  []*schema.Column{UsersColumns[0]},
		ForeignKeys: []*schema.ForeignKey{},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		MethodsTable,
		OauthsTable,
		PermissionsTable,
		RaSsTable,
		ServicesTable,
		UsersTable,
	}
)

func init() {
	MethodsTable.ForeignKeys[0].RefTable = PermissionsTable
	MethodsTable.ForeignKeys[1].RefTable = ServicesTable
	OauthsTable.ForeignKeys[0].RefTable = ServicesTable
	OauthsTable.ForeignKeys[1].RefTable = UsersTable
	PermissionsTable.ForeignKeys[0].RefTable = ServicesTable
	PermissionsTable.ForeignKeys[1].RefTable = UsersTable
	RaSsTable.ForeignKeys[0].RefTable = UsersTable
}
