// Code generated by entc, DO NOT EDIT.

package oauth

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"whoam.xyz/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// ExpiredAt applies equality check predicate on the "expired_at" field. It's identical to ExpiredAtEQ.
func ExpiredAt(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredAt), v))
	})
}

// MainToken applies equality check predicate on the "main_token" field. It's identical to MainTokenEQ.
func MainToken(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMainToken), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Oauth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Oauth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// ExpiredAtEQ applies the EQ predicate on the "expired_at" field.
func ExpiredAtEQ(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExpiredAt), v))
	})
}

// ExpiredAtNEQ applies the NEQ predicate on the "expired_at" field.
func ExpiredAtNEQ(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExpiredAt), v))
	})
}

// ExpiredAtIn applies the In predicate on the "expired_at" field.
func ExpiredAtIn(vs ...time.Time) predicate.Oauth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExpiredAt), v...))
	})
}

// ExpiredAtNotIn applies the NotIn predicate on the "expired_at" field.
func ExpiredAtNotIn(vs ...time.Time) predicate.Oauth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExpiredAt), v...))
	})
}

// ExpiredAtGT applies the GT predicate on the "expired_at" field.
func ExpiredAtGT(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExpiredAt), v))
	})
}

// ExpiredAtGTE applies the GTE predicate on the "expired_at" field.
func ExpiredAtGTE(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExpiredAt), v))
	})
}

// ExpiredAtLT applies the LT predicate on the "expired_at" field.
func ExpiredAtLT(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExpiredAt), v))
	})
}

// ExpiredAtLTE applies the LTE predicate on the "expired_at" field.
func ExpiredAtLTE(v time.Time) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExpiredAt), v))
	})
}

// MainTokenEQ applies the EQ predicate on the "main_token" field.
func MainTokenEQ(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMainToken), v))
	})
}

// MainTokenNEQ applies the NEQ predicate on the "main_token" field.
func MainTokenNEQ(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMainToken), v))
	})
}

// MainTokenIn applies the In predicate on the "main_token" field.
func MainTokenIn(vs ...string) predicate.Oauth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMainToken), v...))
	})
}

// MainTokenNotIn applies the NotIn predicate on the "main_token" field.
func MainTokenNotIn(vs ...string) predicate.Oauth {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Oauth(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMainToken), v...))
	})
}

// MainTokenGT applies the GT predicate on the "main_token" field.
func MainTokenGT(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMainToken), v))
	})
}

// MainTokenGTE applies the GTE predicate on the "main_token" field.
func MainTokenGTE(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMainToken), v))
	})
}

// MainTokenLT applies the LT predicate on the "main_token" field.
func MainTokenLT(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMainToken), v))
	})
}

// MainTokenLTE applies the LTE predicate on the "main_token" field.
func MainTokenLTE(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMainToken), v))
	})
}

// MainTokenContains applies the Contains predicate on the "main_token" field.
func MainTokenContains(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMainToken), v))
	})
}

// MainTokenHasPrefix applies the HasPrefix predicate on the "main_token" field.
func MainTokenHasPrefix(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMainToken), v))
	})
}

// MainTokenHasSuffix applies the HasSuffix predicate on the "main_token" field.
func MainTokenHasSuffix(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMainToken), v))
	})
}

// MainTokenEqualFold applies the EqualFold predicate on the "main_token" field.
func MainTokenEqualFold(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMainToken), v))
	})
}

// MainTokenContainsFold applies the ContainsFold predicate on the "main_token" field.
func MainTokenContainsFold(v string) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMainToken), v))
	})
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.User) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(OwnerInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasService applies the HasEdge predicate on the "service" edge.
func HasService() predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServiceTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasServiceWith applies the HasEdge predicate on the "service" edge with a given conditions (other predicates).
func HasServiceWith(preds ...predicate.Service) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ServiceInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, ServiceTable, ServiceColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Oauth) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Oauth) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Oauth) predicate.Oauth {
	return predicate.Oauth(func(s *sql.Selector) {
		p(s.Not())
	})
}
